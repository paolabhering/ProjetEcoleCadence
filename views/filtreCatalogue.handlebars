{{#if (eq userRole "administrateur")}}
    {{> headerAd}}
{{else if (eq userRole "professeur")}}
    {{> header}}
{{/if}}

<form action="/filtre" method="POST" id="filtreCatalogue">
    <h3>Ajouter des filtres</h3>
        <div class="flex-container">
                <div class="flex-item">
                    <b><label for="category">Catégorie:</label></b><br>
                        <select name="category" id="category">
                            <option value="">Choisir la catégorie</option>
                            <option value="Accessoires">Accessoires</option>
                            <option value="Bas du corps">Bas du corps</option>
                            <option value="Casse-noisette">Casse-noisette</option>
                            <option value="Haut de corps">Haut de corps</option>
                            <option value="Jupe">Jupe</option>
                            <option value="Maillot">Maillot</option>
                            <option value="Pieds">Pieds</option>
                            <option value="Robe">Robe</option>
                            <option value="Tête">Tête</option>
                            <option value="Autre">Autre</option>
                        </select>
                </div>
                <div class="flex-item">
                    <b><label for="quantity">Quantité minimum:</label></b><br>
                        <b><input type="number" id="quantityMin" name="quantityMin" min="0"></b>
                </div>
                <div class="flex-item">
                    <b><label for="age_group">Catégorie d'âge:</label></b><br>
                        <select name="age_group" id="age_group">
                            <option value="">Choisir la catégorie</option>
                            <option value="enfant">Enfant</option>
                            <option value="adolescent">Adolescent</option>
                            <option value="adulte">Adulte</option>
                            <option value="N/A">N/A</option>
                        </select>
                </div>
                <div class="flex-item">
                    <label for="filtreMot" hidden></label><br>
                        <div class="input-with-placeholder">
                            <input type="text" id="filtreMot" name="filtreMot" class="input-with-placeholder" placeholder="Filtre par mot clé">
                            <img class="placeholder-image" src="../static/img/loupeRose.png" alt="Loupe">
                        </div>
                </div>
                <div class="flex-item">
                    <b>Couleur(s):</b><br><br>
                        <input type="checkbox" name="color[]" value="brun" id="brun" class="color-checkbox">
                            <label for="brun" class="color-label brun"></label>
                        <input type="checkbox" name="color[]" value="rouge" id="rouge" class="color-checkbox">
                            <label for="rouge" class="color-label rouge"></label>
                        <input type="checkbox" name="color[]" value="rose" id="rose" class="color-checkbox">
                            <label for="rose" class="color-label rose"></label>
                        <input type="checkbox" name="color[]" value="mauve" id="mauve" class="color-checkbox">
                            <label for="mauve" class="color-label mauve"></label>
                        <input type="checkbox" name="color[]" value="bleu" id="bleu" class="color-checkbox">
                            <label for="bleu" class="color-label bleu"></label>
                        <input type="checkbox" name="color[]" value="vert" id="vert" class="color-checkbox">
                            <label for="vert" class="color-label vert"></label><br>
                        <input type="checkbox" name="color[]" value="jaune" id="jaune" class="color-checkbox">
                            <label for="jaune" class="color-label jaune"></label>
                        <input type="checkbox" name="color[]" value="orange" id="orange" class="color-checkbox">
                            <label for="orange" class="color-label orange"></label>
                        <input type="checkbox" name="color[]" value="noir" id="noir" class="color-checkbox">
                            <label for="noir" class="color-label noir"></label>
                        <input type="checkbox" name="color[]" value="gris" id="gris" class="color-checkbox">
                            <label for="gris" class="color-label gris"></label>
                        <input type="checkbox" name="color[]" value="blanc" id="blanc" class="color-checkbox">
                            <label for="blanc" class="color-label blanc"></label>
                        <input type="checkbox" name="color[]" value="multicolore" id="multicolore" class="color-checkbox">
                            <label for="multicolore" class="color-label multicolore"></label><br>
                </div>
            <div class="flex-item btn">
               <button type="submit" class="btn" id="buttonFiltre" value="recherche">FILTRER</button>
            </div>
</form>


<script>
    const user_id = {{{userId}}};
    const likedCostumeIds = {{{json likedCostumeIds}}};

    document.querySelectorAll('.grid-item').forEach(item => {
    
        const costume_id = Number(item.getAttribute('data-costume-id'));
        
        item.addEventListener('mouseenter', () => {
            item.querySelector('.info-container').style.display = 'block';
        });
        item.addEventListener('mouseleave', () => {
            item.querySelector('.info-container').style.display = 'none';
        });

        const plusBlanc = item.querySelector('.plusB');
        const plusRose = item.querySelector('.plusR');
        const ajoutFavori = item.querySelector(".container-ajoutFavori");
        
        plusBlanc.addEventListener('click', () => {
            plusBlanc.hidden = true;
            plusRose.hidden = false; 
            ajoutFavori.hidden = false;   
        });

        plusRose.addEventListener('click', () => {
            plusRose.hidden = true;
            plusBlanc.hidden = false;  
            ajoutFavori.hidden = true;    
        });

        const coeurBlanc = item.querySelector('.coeurB');
        const coeurRose = item.querySelector('.coeurR');
        
         // Vérifiez si le costume est aimé
        if (likedCostumeIds.includes(parseInt(costume_id))) {
            coeurBlanc.hidden = true;  
            coeurRose.hidden = false;   
        } else {
            coeurBlanc.hidden = false;  
            coeurRose.hidden = true;     
        }

        coeurBlanc.addEventListener('click', () => {
            coeurBlanc.hidden = true;
            coeurRose.hidden = false;    

            //Envoyer une requête AJAX pour ajouter le like
           

            fetch('/ajouterLike', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ user_id, costume_id }),
            })
            .then(response => response.json())
            .then(data => {
                likedCostumeIds.push(costume_id);
            })
            .catch((error) => {
                console.error('Erreur:', error);
            });
        });
        coeurRose.addEventListener('click', () => {
            coeurRose.hidden = true;
            coeurBlanc.hidden = false;     
       
        // envoyer une requête ajax pour enlever le like

            
            fetch('/enleverLike', {
                method: 'post',
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({ user_id, costume_id }),
            })
            .then(response => response.json())
            .then(data => {
                likedCostumeIds = likedCostumeIds.filter(id => id !== costume_id);
            })
            .catch((error) => {
                console.error('erreur:', error);
            });
        });
    });

    const user_id = {{{userId}}};
    let likedCostumeIds = {{{json likedCostumeIds}}};
    let groupes = {{{json groupesUser}}};
    let favoriteCostumeGroups = {{{json favoriteCostumeGroups}}};
          
     //Envoyer une requête AJAX pour ajouter les groupes au favori

    fetch('/groupes')
        .then(response => response.json())
        .then(groupes => {
            // Mettre à jour le select avec les groupes récupérés
            const selectGroupes = document.querySelectorAll('.select-group');
            selectGroupes.forEach(select => {
                groupes.forEach(groupe => {
                const option = document.createElement('option');
                    option.value = groupe.groupe_id;
                    option.textContent = groupe.nom;
                    select.appendChild(option);
                });
            });
        })
        .catch(error => {
            console.error('Erreur lors de la récupération des groupes:', error);
        });

    document.querySelectorAll('.grid-item').forEach(item => {
    
        const costume_id = Number(item.getAttribute('data-costume-id'));
        
        item.addEventListener('mouseenter', () => {
            item.querySelector('.info-container').style.display = 'block';
        });
        item.addEventListener('mouseleave', () => {
            item.querySelector('.info-container').style.display = 'none';
        });

        const plusBlanc = item.querySelector('.plusB');
        const plusRose = item.querySelector('.plusR');
        const ajoutFavori = item.querySelector(".container-ajoutFavori");
        const groupeInfo = item.querySelector(".groupe-info");
        

         // Vérifier si le costume est favori
        if (favoriteCostumeGroups[costume_id]) {
            plusBlanc.hidden = true;  
            plusRose.hidden = false; 
            groupeInfo.textContent = ` Costume favori pour groupe: ${favoriteCostumeGroups[costume_id].group_name}`;
            groupeInfo.hidden = false; 
        } else {
            plusBlanc.hidden = false;  
            plusRose.hidden = true;     
            groupeInfo.hidden = true; 
        }

        plusBlanc.addEventListener('click', () => {
            plusBlanc.hidden = true;
            plusRose.hidden = false; 
            ajoutFavori.hidden = false; 

            const selectGroupe = item.querySelector('.select-group');

            selectGroupe.addEventListener('change',(event) => {
                const selectedGroupeId = event.target.value;
                const selectedOption = event.target.options[event.target.selectedIndex];
                const selectedGroupeNom = selectedOption.text; // Récupère le nom du groupe à partir de l'option sélectionnée
                
                fetch('/ajouterFavori', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ user_id, costume_id, group_id: selectedGroupeId, group_name: selectedGroupeNom }),
                })
                .then(response => response.json())
                .then(data => {
                    ajoutFavori.hidden = true; 
                    
                    favoriteCostumeGroups[costume_id] = {
                        group_id: selectedGroupeId,
                        group_name: selectedGroupeNom
                    };
                    groupeInfo.textContent = `Costume favori pour groupe: ${selectedGroupeNom}`;
                    groupeInfo.hidden = false; 
                })
                .catch((error) => {
                    console.error('Erreur:', error);
                });
            });
        });

       
        plusRose.addEventListener('click', () => {
            plusRose.hidden = true;
            plusBlanc.hidden = false;  
            ajoutFavori.hidden = true; 
            groupeInfo.hidden = true;

            const group_id = favoriteCostumeGroups[costume_id] ? favoriteCostumeGroups[costume_id].group_id : null;

             // envoyer une requête ajax pour enlever le favori

            fetch('/enleverFavori', {
                method: 'post',
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({ costume_id, group_id }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur lors de la suppression du favori'); // traiter les erreurs de réponse
                }
                return response.json(); 
            }) 
            .then(data => {
                delete favoriteCostumeGroups[costume_id];
            })
            .catch((error) => {
                console.error('erreur:', error);
                alert("Une erreur s'est produite lors de la suppression.");
            });
        });

        const coeurBlanc = item.querySelector('.coeurB');
        const coeurRose = item.querySelector('.coeurR');
        
         // Vérifier si le costume est aimé
        if (likedCostumeIds.includes(parseInt(costume_id))) {
            coeurBlanc.hidden = true;  
            coeurRose.hidden = false;   
        } else {
            coeurBlanc.hidden = false;  
            coeurRose.hidden = true;     
        }

        coeurBlanc.addEventListener('click', () => {
            coeurBlanc.hidden = true;
            coeurRose.hidden = false;    

            //Envoyer une requête AJAX pour ajouter le like
           

            fetch('/ajouterLike', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ user_id, costume_id }),
            })
            .then(response => response.json())
            .then(data => {
                likedCostumeIds.push(costume_id);
            })
            .catch((error) => {
                console.error('Erreur:', error);
            });
        });


        coeurRose.addEventListener('click', () => {
            coeurRose.hidden = true;
            coeurBlanc.hidden = false;     
       
        // envoyer une requête ajax pour enlever le like

            
            fetch('/enleverLike', {
                method: 'post',
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({ user_id, costume_id }),
            })
            .then(response => response.json())
            .then(data => {
                likedCostumeIds = likedCostumeIds.filter(id => id !== costume_id);
            })
            .catch((error) => {
                console.error('erreur:', error);
            });
        });


    
    });

 </script>


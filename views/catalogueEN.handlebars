

{{#if (eq userRole "administrateur")}}
    {{> headerAdEN}}
{{else if (eq userRole "professeur")}}
    {{> headerEN}}
{{/if}}

{{#if filters}}
    <div class="container-confirmation" id="filtersApplied">
        <h3>Filter(s) applied(s) :</h3>
        <ul>
            {{#if filters.category}}
                <li><b>Cat√©gory : </b>{{filters.category}}</li>
            {{/if}}
            {{#if filters.quantityMin}}
                <li><b>Minimal quantity : </b>{{filters.quantityMin}}</li>
            {{/if}}
            {{#if filters.age_group}}
                <li><b>Age category : </b>{{filters.age_group}}</li>
            {{/if}}
            {{#if filters.filtreMot}}
                <li><b>Keyword : </b>{{filters.filtreMot}}</li>
            {{/if}}
            {{#if filters.color}}
                <li><b>Color(s) : </b>{{filters.color}}</li>
            {{/if}}
        </ul>
    </div>
{{/if}}

 <form action="/choixProf" method="post" id="preferenceCostume">
 <div class="grid-container">
    {{#each groupeCostume}}
        <div class="grid-item" data-costume-id="{{this.costume_id}}">
                <a href="/detailsCostume/{{this.costume_id}}">
                    <div class="image-container">
                        <img src="/static/img/{{this.image}}"  alt="{{this.titre}}" class="imageCatalogue">
                    </div>
                 </a>
                    <div class="image-options">
                        <img src="/static/img/plusBlanc.png" alt="plus" class="plusB">
                        <img src="/static/img/plusRose.png" alt="plus" class="plusR" hidden >
                        <img src="/static/img/coeurBlanc.png" alt="coeur" class="coeurB"> 
                        <img src="/static/img/coeurRosePlein.png" alt="coeur" class="coeurR" hidden> 
                    </div>

                    <div class="info-container">
                        <h4>{{this.titre}}</h4>
                            Quantity : {{this.quantite_totale}}<br>
                            Location : {{#if this.localisation}}{{this.localisation}}{{else}}N/A{{/if}}
                    </div>
                    <div class="container-ajoutFavori" hidden>
                        <label for="groupes">Favorite costume for the group:</label>
                            <select name="groupes" class="select-group">
                                <option value="">Select</option>
                                {{#each groupe}}
                                    <option value="{{groupe.id}}">{{groupe.nom}}</option>
                                {{/each}}
                            </select>
                    </div>
                    <div class="groupe-info" hidden>
                        {{#if favoriteCostumeGroups.[this.costume_id]}}
                            Favorite costume for the group : {{favoriteCostumeGroups.[this.costume_id].group_name}}
                        {{/if}}
                    </div>
        </div>
    {{/each}}
</div>
</form>


  <script>
    const user_id = {{{userId}}};
    let likedCostumeIds = {{{json likedCostumeIds}}};
    let groupes = {{{json groupesUser}}};
    let favoriteCostumeGroups = {{{json favoriteCostumeGroups}}};
          
     //Send an AJAX request to add groups to favorites
    fetch('/groupes')
        .then(response => response.json())
        .then(groupes => {
            // Update the select with the retrieved groups.
            const selectGroupes = document.querySelectorAll('.select-group');
            selectGroupes.forEach(select => {
                groupes.forEach(groupe => {
                const option = document.createElement('option');
                    option.value = groupe.groupe_id;
                    option.textContent = groupe.nom;
                    select.appendChild(option);
                });
            });
        })
        .catch(error => {
            console.error('Error while retrieving groups:', error);
        });

    document.querySelectorAll('.grid-item').forEach(item => {
    
        const costume_id = Number(item.getAttribute('data-costume-id'));
        
        item.addEventListener('mouseenter', () => {
            item.querySelector('.info-container').style.display = 'block';
        });
        item.addEventListener('mouseleave', () => {
            item.querySelector('.info-container').style.display = 'none';
        });

        const plusBlanc = item.querySelector('.plusB');
        const plusRose = item.querySelector('.plusR');
        const ajoutFavori = item.querySelector(".container-ajoutFavori");
        const groupeInfo = item.querySelector(".groupe-info");
        

         //Check if the suit is a favorite
        if (favoriteCostumeGroups[costume_id]) {
            plusBlanc.hidden = true;  
            plusRose.hidden = false; 
            groupeInfo.textContent = ` Favorite costume for the group : ${favoriteCostumeGroups[costume_id].group_name}`;
            groupeInfo.hidden = false; 
        } else {
            plusBlanc.hidden = false;  
            plusRose.hidden = true;     
            groupeInfo.hidden = true; 
        }

        plusBlanc.addEventListener('click', () => {
            plusBlanc.hidden = true;
            plusRose.hidden = false; 
            ajoutFavori.hidden = false; 

            const selectGroupe = item.querySelector('.select-group');

            selectGroupe.addEventListener('change',(event) => {
                const selectedGroupeId = event.target.value;
                const selectedOption = event.target.options[event.target.selectedIndex];
                const selectedGroupeNom = selectedOption.text; 
                
                fetch('/ajouterFavori', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ user_id, costume_id, group_id: selectedGroupeId, group_name: selectedGroupeNom }),
                })
                .then(response => response.json())
                .then(data => {
                    ajoutFavori.hidden = true; 
                    
                    favoriteCostumeGroups[costume_id] = {
                        group_id: selectedGroupeId,
                        group_name: selectedGroupeNom
                    };
                    groupeInfo.textContent = `Favorite costume for the group : ${selectedGroupeNom}`;
                    groupeInfo.hidden = false; 
                })
                .catch((error) => {
                    console.error('Erreur:', error);
                });
            });
        });

       
        plusRose.addEventListener('click', () => {
            plusRose.hidden = true;
            plusBlanc.hidden = false;  
            ajoutFavori.hidden = true; 
            groupeInfo.hidden = true;

            const group_id = favoriteCostumeGroups[costume_id] ? favoriteCostumeGroups[costume_id].group_id : null;

             //send an ajax request to remove the favorite
            fetch('/enleverFavori', {
                method: 'post',
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({ costume_id, group_id }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur lors de la suppression du favori'); 
                }
                return response.json(); 
            }) 
            .then(data => {
                delete favoriteCostumeGroups[costume_id];
            })
            .catch((error) => {
                console.error('erreur:', error);
                alert("Une erreur s'est produite lors de la suppression.");
            });
        });

        const coeurBlanc = item.querySelector('.coeurB');
        const coeurRose = item.querySelector('.coeurR');
        
         // Check if the costume is liked
        if (likedCostumeIds.includes(parseInt(costume_id))) {
            coeurBlanc.hidden = true;  
            coeurRose.hidden = false;   
        } else {
            coeurBlanc.hidden = false;  
            coeurRose.hidden = true;     
        }

        coeurBlanc.addEventListener('click', () => {
            coeurBlanc.hidden = true;
            coeurRose.hidden = false;    

            //Send an AJAX request to add the like
            fetch('/ajouterLike', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ user_id, costume_id }),
            })
            .then(response => response.json())
            .then(data => {
                likedCostumeIds.push(costume_id);
            })
            .catch((error) => {
                console.error('Erreur:', error);
            });
        });


        coeurRose.addEventListener('click', () => {
            coeurRose.hidden = true;
            coeurBlanc.hidden = false;     
       
            // send an AJAX request to remove the like            
            fetch('/enleverLike', {
                method: 'post',
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({ user_id, costume_id }),
            })
            .then(response => response.json())
            .then(data => {
                likedCostumeIds = likedCostumeIds.filter(id => id !== costume_id);
            })
            .catch((error) => {
                console.error('erreur:', error);
            });
        });


    
    });

 </script>
